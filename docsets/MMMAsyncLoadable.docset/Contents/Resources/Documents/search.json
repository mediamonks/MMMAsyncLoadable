{"Structs/AsyncLoadableStreamObject.html#/content":{"name":"content","abstract":"<p>Contents property of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AsyncLoadable.html\">AsyncLoadable</a></code>, only available if <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AsyncLoadable.html#/isContentsAvailable\">isContentsAvailable</a></code>.</p>","parent_name":"AsyncLoadableStreamObject"},"Structs/AsyncLoadableStreamObject.html#/error":{"name":"error","abstract":"<p>Error property of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AsyncLoadable.html\">AsyncLoadable</a></code>, if any.</p>","parent_name":"AsyncLoadableStreamObject"},"Structs/AsyncLoadableStreamObject.html#/state":{"name":"state","abstract":"<p>The current state of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AsyncLoadable.html\">AsyncLoadable</a></code>.</p>","parent_name":"AsyncLoadableStreamObject"},"Structs/AsyncLoadableStreamObject.html":{"name":"AsyncLoadableStreamObject","abstract":"<p>Stateful object that get&rsquo;s passed in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AsyncLoadableStream.html#/iterator\">iterator</a></code>.</p>"},"Protocols/AsyncLoadableProtocol.html#/C":{"name":"C","parent_name":"AsyncLoadableProtocol"},"Protocols/AsyncLoadableProtocol.html#/content":{"name":"content","abstract":"<p>The associated content for this loadable. This is now a concrete type, so if your loadable loads multiple values,","parent_name":"AsyncLoadableProtocol"},"Protocols/AsyncLoadableProtocol.html#/fetch()":{"name":"fetch()","abstract":"<p>Fetch the content asynchronously, instead of adding a listener, this will throw upon <code>setFailedWithError</code> and","parent_name":"AsyncLoadableProtocol"},"Protocols/AsyncLoadableProtocol.html#/fetchIfNeeded()":{"name":"fetchIfNeeded()","abstract":"<p>Similar to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/AsyncLoadableProtocol.html#/fetch()\">fetch()</a></code>, only when <code>MMMPureLoadableProtocol/needsSync()</code> is <code>true</code>. Equivalent","parent_name":"AsyncLoadableProtocol"},"Protocols/AsyncLoadableProtocol.html":{"name":"AsyncLoadableProtocol","abstract":"<p>An async loadable makes it possible to fetch the content <code>C</code> using the async/await syntax.</p>"},"Extensions/MMMPureLoadableProtocol.html#/sink(_:)":{"name":"sink(_:)","abstract":"<p>Observe changes in this loadable by supplying a async closure. Will stop listening to","parent_name":"MMMPureLoadableProtocol"},"Extensions/MMMPureLoadableProtocol.html":{"name":"MMMPureLoadableProtocol"},"Classes/AsyncLoadableStream.html#/iterator":{"name":"iterator","abstract":"<p>The iterator to loop over, e.g. using a <code>for await val in stream.iterator { ...</code>.</p>","parent_name":"AsyncLoadableStream"},"Classes/AsyncLoadableStream.html#/init(_:bufferingPolicy:)":{"name":"init(_:bufferingPolicy:)","abstract":"<p>Initialise a new stream.</p>","parent_name":"AsyncLoadableStream"},"Classes/AsyncLoadableStream.html#/finish()":{"name":"finish()","abstract":"<p>Finish the stream, this stops the <code>for await</code> loop. This is required to call somewhere, either by <code>deinit</code> (via","parent_name":"AsyncLoadableStream"},"Classes/AsyncLoadableObserver.html#/init(loadable:callback:)":{"name":"init(loadable:callback:)","parent_name":"AsyncLoadableObserver"},"Classes/AsyncLoadable/AsyncError.html#/lostParent":{"name":"lostParent","abstract":"<p>We&rsquo;ve lost the weak reference to our parent (self) inside the callback, that means we should be <code>nil</code> as well.</p>","parent_name":"AsyncError"},"Classes/AsyncLoadable/AsyncError.html#/invalidData":{"name":"invalidData","abstract":"<p>We&rsquo;ve synced successfully, however, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AsyncLoadable.html#/isContentsAvailable\">isContentsAvailable</a></code> is false, or","parent_name":"AsyncError"},"Classes/AsyncLoadable/AsyncError.html#/unknownError":{"name":"unknownError","abstract":"<p>We did not sync successfully, and no <code>AsyncLoadable/error</code> was passed.</p>","parent_name":"AsyncError"},"Classes/AsyncLoadable/AsyncError.html":{"name":"AsyncError","abstract":"<p>Errors thrown by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AsyncLoadable.html\">AsyncLoadable</a></code>.</p>","parent_name":"AsyncLoadable"},"Classes/AsyncLoadable.html#/content":{"name":"content","abstract":"<p>The content of this loadable. Only available if <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AsyncLoadable.html#/isContentsAvailable\">isContentsAvailable</a></code> is <code>true</code>.</p>","parent_name":"AsyncLoadable"},"Classes/AsyncLoadable.html#/isContentsAvailable":{"name":"isContentsAvailable","abstract":"<p>If the content is available, defaults to <code>content != nil</code>, but you can override this to supply additional conditions.</p>","parent_name":"AsyncLoadable"},"Classes/AsyncLoadable.html#/setDidSyncSuccessfullyWithContent(_:)":{"name":"setDidSyncSuccessfullyWithContent(_:)","abstract":"<p>Call this to successfully sync the loadable.</p>","parent_name":"AsyncLoadable"},"Classes/AsyncLoadable.html#/fetch()":{"name":"fetch()","abstract":"<p>Fetch the content for this loadable. Similar to <code>sync()</code> only we immediately return either the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AsyncLoadable.html#/content\">content</a></code> or","parent_name":"AsyncLoadable"},"Classes/AsyncLoadable.html#/fetchIfNeeded()":{"name":"fetchIfNeeded()","abstract":"<p>Fetch the content for this loadable, if it needs sync. Similar to <code>syncIfNeeded()</code>.</p>","parent_name":"AsyncLoadable"},"Classes/AsyncLoadable.html#/map(_:)":{"name":"map(_:)","abstract":"<p>Map a <code>AsyncLoadable&lt;C&gt;</code> into <code>AsyncLoadable&lt;T&gt;</code> by supplying a closure that maps <code>C</code> into","parent_name":"AsyncLoadable"},"Classes/AsyncLoadable.html#/asyncMap(_:)":{"name":"asyncMap(_:)","abstract":"<p>Similar to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AsyncLoadable.html#/map(_:)\">map(_:)</a></code> but with the ability to supply a async callback.</p>","parent_name":"AsyncLoadable"},"Classes/AsyncLoadable.html#/flatMap(_:)":{"name":"flatMap(_:)","abstract":"<p>FlatMap a <code>AsyncLoadable&lt;C&gt;</code> into <code>AsyncLoadable&lt;T&gt;</code> by supplying a closure that maps <code>C</code> into","parent_name":"AsyncLoadable"},"Classes/AsyncLoadable.html#/joined(_:)":{"name":"joined(_:)","abstract":"<p>Join two <code>AsyncLoadable</code>s together, from <code>AsyncLoadable&lt;C&gt;</code> and <code>AsyncLoadable&lt;T&gt;</code> to a","parent_name":"AsyncLoadable"},"Classes/AsyncLoadable.html":{"name":"AsyncLoadable","abstract":"<p>AsyncLoadable is a concrete implementation of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/AsyncLoadableProtocol.html\">AsyncLoadableProtocol</a></code>, subclass from this class to make"},"Classes/AsyncLoadableObserver.html":{"name":"AsyncLoadableObserver","abstract":"<p><code>MMMLoadableObserver</code> that supports asynchronous closures as it&rsquo;s callback.</p>"},"Classes/AsyncLoadableStream.html":{"name":"AsyncLoadableStream","abstract":"<p>Listen to an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AsyncLoadable.html\">AsyncLoadable</a></code> by using an <code>AsyncStream</code>. This allows you to iterate over the"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}